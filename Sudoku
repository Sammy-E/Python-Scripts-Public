#The goal is to make a sudoku puzzle

Step 1. 
def row_unused_digit(grid, valid_digit, i):
    for k in range(9):
        if grid[i][k] > 0:
            valid_digit[grid[i][k]-1]=0
            
digit = [i +1 for i in range(9)]
print(digit)
row_unused_digit(grid_wiki, digit, 0)
print(digit)

for row in grid_wiki:
    print(* row, separator = ' ') 

Step 2. 
def column_unused_digit(grid, valid_digit, i):
    for k in range(9):
        if grid[k][j] > 0:
            valid_digit[grid[k][i]-1]=0
            
digit = [i + 1 for i in range(9)]
column_unused_digit(grid_wiki, digit, 0)
print(digit)

for row in grid_wiki:
    print(* row, separator = ' ')

Step 3. 
def block_unused_digit(grid, valid_digit, i, j):
    i = i // 3 * 3
    j = j // 3 * 3
    for k in range(9):
        if grid[i + k%3][j + k // 3] > 0:
            valid_digit[grid[i + k%3][j + k // 3] - 1] = 0 
            
digit = [i + 1 for i in range(9)]

block_unused_digit(grid_wiki, digit, 2, 2)
print(digit)

for row in grid_wiki:
    print(* row, sep = ' ')

Step 4. 
def possible_number(grid, i, j):
    
    digit = [i + 1 for i in range(9)]
    
    row_unused_digit(grid, digit, i)
    column_unused_digit(grid, digit, j)
    block_unused_digit(grid, digit, i, j)
    
    return digit

print(possible_number(grid_wiki, 0, 6))

Step 5. 
def best_cell(grid):
    
    digit = [i + 1 for i in range(9)]
    column =- 1
    row=-1
    number_of_zeros=0
    bestdigit=[]
    for i in range(9):
        for j in range(9):
            digit = possible_number(grid, i, j)
            if digit.count(0) > number_of_zeros and digit.count(0)<9 and grid[i][j]==0:
                number_of_zeros = digit.count(0)
                bestdigit = digit
                row = i
                column =j
    return [row, column, bestdigit]
    
best_cell(grid_wiki)

Step 6.
def solve_sudoku(grid):
    best=best_cell(grid)
    possibilities = [i for i in best[2] if i > 0]
    possnumbers = len(possibilities)
    if best[0] ==- 1 or best[1] ==- 1:
        return 0
    elif possbumbers >= 1:
        grid[best[0]][best[1]] = possibities[0]
    solve_sudoku(grid)
    
solve_sudoku(grid_wiki)

for row in grid_wiki:
    print(* row, sep = ' ')
